##
## Deploy https://artifacthub.io/packages/helm/bitnami/keycloak
##

locals {
  # keycloak_provider = "github"
  keycloak_provider     = "google"
  keycloak_root_domain  = ".${var.domain_name}"
  keycloak_auth_domain  = "keycloak${local.keycloak_root_domain}"
  keycloak_admin_domain = "keycloak-admin${local.keycloak_root_domain}"
  keycloak_namespace    = "keycloak"
  # keycloak_secretname  = "${local.keycloak_namespace}-secret"

  keycloak_nginx_ingress_options = var.enable_keycloak ? {
    "global-auth-signin" = "https://${local.keycloak_auth_domain}/keycloak/start?rd=https%3A%2F%2F$host$request_uri"
    "global-auth-url"    = "https://${local.keycloak_auth_domain}/keycloak/auth"
  } : {}

}


resource "kubernetes_namespace" "keycloak" {
  count = var.enable_keycloak ? 1 : 0

  metadata {
    annotations = {
      name = local.keycloak_namespace
    }

    labels = {
      mylabel = local.keycloak_namespace
    }

    name = local.keycloak_namespace
  }
}


resource "helm_release" "keycloak" {
  count = var.enable_keycloak ? 1 : 0

  name       = "keycloak"
  repository = "https://charts.bitnami.com/bitnami"
  chart      = "keycloak"
  version    = "21.0.1"
  namespace  = kubernetes_namespace.keycloak[0].metadata[0].name

  values = [yamlencode({
    podDisruptionBudget : {
      enabled : false
    }
    extraEnvVars : [
      {
        name : "KEYCLOAK_PROXY"
        value : "edge"
      },
      {
        name : "KC_HOSTNAME"
        value : local.keycloak_auth_domain
      },
    ],
    # externalDatabase : {
    #   host : data.aws_rds_cluster.devops[0].endpoint
    #   port : data.aws_rds_cluster.devops[0].port
    #   user : "devops_keycloak"
    #   database : "devops_keycloak"
    #   existingSecret : "keycloak-db-secret"
    # }
    # postgresql : {
    #   enabled : false
    # }
    adminIngress : {
      enabled : true
      hostname : local.keycloak_admin_domain
      annotations : {
        "kubernetes.io/ingress.class" : "nginx",
        "cert-manager.io/cluster-issuer" : "clusterissuer-letsencrypt-production"
        # "nginx.ingress.kubernetes.io/enable-global-auth" : "false"
      }
      tls : [
        {
          secretName : "keycloak-admin-https",
          hosts : [
            local.keycloak_auth_domain
          ]
        }
      ]
    },
    keycloakConfigCli : {
      configuration : jsonencode(
        {
          realm : "master",
          attributes : {
            frontendUrl : "https://${local.keycloak_admin_domain}/"
          }
      })
    }
    ingress : {
      enabled : true,
      path : "/",
      hostname : local.keycloak_auth_domain
      hosts : [
        local.keycloak_auth_domain
      ],
      annotations : {
        "kubernetes.io/ingress.class" : "nginx",
        "cert-manager.io/cluster-issuer" : "clusterissuer-letsencrypt-production",
        "nginx.ingress.kubernetes.io/enable-global-auth" : "false"
      },
      tls : [
        {
          secretName : "keycloak-proxy-https-cert",
          hosts : [
            local.keycloak_auth_domain
          ]
        }
      ]
    },
    # tls: {
    #   enabled: true
    #   autoGenerated: true
    # }
  })]

}



# data "aws_rds_cluster" "devops" {
#   count = var.enable_keycloak ? 1 : 0

#   cluster_identifier = "devops"
# }

# resource "kubectl_manifest" "keycloak_secret" {
#   count = var.enable_keycloak ? 1 : 0

#   yaml_body = yamlencode({
#     apiVersion : "kubernetes-client.io/v1"
#     kind : "ExternalSecret"

#     metadata : {
#       name : "keycloak-db-secret"
#       namespace : kubernetes_namespace.keycloak[0].metadata[0].name
#     }
#     spec : {
#       backendType : "secretsManager"
#       dataFrom : [var.keycloak_external_secret_name]
#     }
#   })
#   depends_on = [kubernetes_namespace.keycloak]
# }




# resource "kubernetes_ingress_v1" "keycloak_unauth" {
#   count = var.enable_keycloak ? 1 : 0

#   metadata {
#     name      = "keycloak-realms"
#     namespace = local.keycloak_namespace
#     annotations = {
#       "kubernetes.io/ingress.class"             = "nginx"
#       "cert-manager.io/cluster-issuer"          = "clusterissuer-letsencrypt-production"
#       "nginx.ingress.kubernetes.io/enable-cors" = "false"
#       # "nginx.ingress.kubernetes.io/cors-allow-origin"      = "http://${var.dev_user_auth_frontend_domain}"
#       # "nginx.ingress.kubernetes.io/cors-allow-credentials" = "true"
#       "nginx.ingress.kubernetes.io/enable-global-auth" = "false"
#     }
#   }

#   spec {
#     rule {
#       host = local.keycloak_auth_domain
#       http {
#         path {
#           path      = "/realms/"
#           path_type = "ImplementationSpecific"
#           backend {
#             service {
#               name = "keycloak"
#               port {
#                 name = "http"
#               }
#             }
#           }
#         }
#       }
#     }
#     tls {
#       secret_name = "keycloak.stagewearemove.com-tls"
#       hosts       = [local.keycloak_auth_domain]
#     }
#   }
#   depends_on = [helm_release.keycloak]
# }
